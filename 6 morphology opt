i) erosion, dilation , opening  and closing -
code-
#Perform dilation and erosion
import numpy as np
import cv2
import matplotlib.pyplot as plt
image=cv2.imread("bubble.jpeg",cv2.IMREAD_GRAYSCALE)

#create a binary image having (0's and 1's)
#image=np.zeros((10,10),dtype=np.uint8)
image[3:7,3:7]=255 #add white square in middle
print("Input Image:")
print(image)
#define structuring element or kernel
kernel=np.ones((3,3),np.uint8)
#Perform dilation
dilation=cv2.dilate(image,kernel,iterations=1)
print("Dilated image:")
print(dilation)
#Perform erosion
erosion=cv2.erode(image,kernel, iterations=1)
print("Eroded image:")
print(erosion)
#Perform opening 
erode=cv2.erode(image,kernel,iterations=1)
opening=cv2.dilate(erode,kernel,iterations=1)
#Perform closing
dilate=cv2.dilate(image,kernel,iterations=1)
closing=cv2.erode(dilate,kernel,iterations=1)
#Show the original image
plt.subplot(2,3,1)
plt.imshow(image,cmap="gray")
plt.title('Original Image:')

#Show to eroded image
plt.subplot(2,3,2)
plt.imshow(erosion,cmap="gray")
plt.title('Eroded Image:')

#Show the dilated image
plt.subplot(2,3,3)
plt.imshow(opening,cmap="gray")
plt.title('Opening Image:')

#Show the original image
plt.subplot(2,3,4)
plt.imshow(image,cmap="gray")
plt.title('Original Image:')

#Show to eroded image
plt.subplot(2,3,5)
plt.imshow(dilation,cmap="gray")
plt.title('Dilated Image:')

#Show the dilated image
plt.subplot(2,3,6)
plt.imshow(closing,cmap="gray")
plt.title('Closing Image:')
plt.show()








ii) Boundary Extraction-
code-
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Define kernel
kernel = np.ones((5, 5), np.uint8)

# Load the image
image = cv2.imread("circle.jpeg", cv2.IMREAD_GRAYSCALE)

# Perform erosion
eroded = cv2.erode(image, kernel, iterations=1)

# Boundary extraction: Subtract the eroded image from the original
boundary = image - eroded

# Plotting the results
plt.subplot(1, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Input Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(eroded, cmap='gray')
plt.title("Eroded Image")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(boundary, cmap='gray')
plt.title("Boundary Extracted")
plt.axis('off')

plt.show()







iii) hit and miss transformation-
code-
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Define a kernel for the Hit-and-Miss transform
kernel = np.array(([0, 1, 0], [1, 1, 1], [0, 1, 0]), np.uint8)

# Read the image in grayscale
image = cv2.imread("circle.jpeg", cv2.IMREAD_GRAYSCALE)

# Perform the Hit-and-Miss transformation
hitmiss = cv2.morphologyEx(image, cv2.MORPH_HITMISS, kernel)

# Display the result using matplotlib
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(hitmiss, cmap='gray')
plt.title('Hit-and-Miss Transform')

plt.show()
